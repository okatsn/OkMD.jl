var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OkMD","category":"page"},{"location":"#OkMD","page":"Home","title":"OkMD","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OkMD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OkMD]","category":"page"},{"location":"#OkMD.expr_item","page":"Home","title":"OkMD.expr_item","text":"Expression that matches item bullet of asterisk.\n\n\n\n\n\n","category":"constant"},{"location":"#OkMD.get_changelog-Tuple{Any, Any, Any}","page":"Home","title":"OkMD.get_changelog","text":"get_changelog(projectfile, logfile, nlevel; kwargs...) get the target section of logfile that matches the version number in projectfile, where the version number is assumed to be in the header of nlevel.\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.getheaderstr-Tuple{Vector}","page":"Home","title":"OkMD.getheaderstr","text":"Given a vector Any, getheaderstr(v::Vector) returns a (nested) strings of plain string, code, text field of Markdown.___.text.\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.headlevel-Union{Tuple{Markdown.Header{n}}, Tuple{n}} where n","page":"Home","title":"OkMD.headlevel","text":"headlevel(::Markdown.Header{n}) returns n.\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.islevel-Tuple{Any, Any}","page":"Home","title":"OkMD.islevel","text":"Given a object mdc, islevel(mdc, n) returns true if mdc is the type of Markdown.Header{n}\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.islevelleq-Tuple{Any, Any}","page":"Home","title":"OkMD.islevelleq","text":"Given a object mdc, islevelleq(mdc, n) returns true if mdc is the type of Markdown.Header{x} where x ≤ n. In brief, it recursively finds if it is a header of higher level (smaller n) until n==0 (false is returned).\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.myflat-Tuple{Vector}","page":"Home","title":"OkMD.myflat","text":"Flatten nested vectors to a vector of strings.\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.plain_string-Tuple{Markdown.MD}","page":"Home","title":"OkMD.plain_string","text":"plain_string(md2::Markdown.MD) convert item bullet of asterisk (*) into -.\n\nExample\n\nusing Markdown, OkMD\nmd2 = \"\"\"\nChangelog\n- v0.1.0\n\"\"\"\n\nopen(\"changelog_for_test.md\", \"w\") do io\n    write(io, OkMD.plain_string(md2))\nend\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.read_section-Tuple{String, Int64, Regex}","page":"Home","title":"OkMD.read_section","text":"read_section(fpath::String, nlevel::Int, exprh::Regex; with_header = true, kwargs...) read Markdown file fpath of Header of nlevel matching exprh. It takes the same kwargs as targetrange and targetsection.\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.stripheaderstring-Tuple{Markdown.Header}","page":"Home","title":"OkMD.stripheaderstring","text":"stripheaderstring(mdhd::Markdown.Header) returns plain string concatenating the text or code field in Markdown container objects of format (i.e., Markdown.Code, Markdown.Link, Markdown.Italic, Markdown.Bold).\n\nSee also OkMD.getheaderstr, OkMD.myflat.\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.targetrange-Tuple{Vector, Any, Regex}","page":"Home","title":"OkMD.targetrange","text":"Given a Vector, targetrange(mdcs::Vector, nlevel, exprh::Regex; which_one = only) find the target Markdown.Header{nlevel} object whose content matches exprh, returning a range which starts from this header until (but not include) the next header Markdown.Header{nlevelnext} where nlevelnext ≤ nlevel.\n\nBy default, if there is no or more than one header of nlevel matching exprh, error will be raised by which_one = only. You can assign which_one = last for example to get the last matched section.\n\nAlso see islevel, islevelleq and targetsection.\n\n\n\n\n\n","category":"method"},{"location":"#OkMD.targetsection-Tuple{Markdown.MD, Any, Any}","page":"Home","title":"OkMD.targetsection","text":"Given a Markdown.MD object, targetsection(md1::Markdown.MD, nlevel, exprh) returns the section (which is a Vector) that starts with the Markdown.Header{nlevel} object whose content matches exprh and ends until the next header Markdown.Header{nlevelnext} where nlevelnext ≤ nlevel.\n\nAlso see targetrange.\n\n\n\n\n\n","category":"method"}]
}
